{"ast":null,"code":"import{NavLink,useParams,useNavigate}from\"react-router-dom\";import axios from'axios';import{useState,useEffect}from\"react\";import\"./WordDefinitions.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function WordDefinitions(){var _definition$definitio;const navigate=useNavigate();const{word}=useParams();const[definition,setDefinition]=useState();useEffect(()=>{axios.post(\"http://localhost:3000/words/definition\",{word:word}).then(response=>{setDefinition(response.data);}).catch(error=>{console.log(\"error getting word definition\");});},[word]);return/*#__PURE__*/_jsxs(\"section\",{className:\"word-definitions\",children:[/*#__PURE__*/_jsx(NavLink,{to:\"/\",onClick:()=>navigate(-1),className:\"play-again__element\",children:\"Go Back to Home\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"\".concat(word.toUpperCase())}),/*#__PURE__*/_jsx(\"h3\",{children:\"Part of Speech: \".concat(definition===null||definition===void 0?void 0:definition.partOfSpeech)}),definition===null||definition===void 0?void 0:(_definition$definitio=definition.definitions)===null||_definition$definitio===void 0?void 0:_definition$definitio.map((element,index)=>{return/*#__PURE__*/_jsxs(\"div\",{className:\"word-definitions__container\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Definition:\"}),\" \",\"\".concat(element===null||element===void 0?void 0:element.definition)]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Synonym:\"}),\" \",\"\".concat((element===null||element===void 0?void 0:element.synonyms[0])||\"\")]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Antonym:\"}),\" \",\"\".concat((element===null||element===void 0?void 0:element.antonyms[0])||\"\")]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Example:\"}),\" \",\"\".concat((element===null||element===void 0?void 0:element.example)||\"\")]})]},index);})]});}export default WordDefinitions;","map":{"version":3,"names":["NavLink","useParams","useNavigate","axios","useState","useEffect","jsx","_jsx","jsxs","_jsxs","WordDefinitions","_definition$definitio","navigate","word","definition","setDefinition","post","then","response","data","catch","error","console","log","className","children","to","onClick","concat","toUpperCase","partOfSpeech","definitions","map","element","index","synonyms","antonyms","example"],"sources":["C:/Users/willi/OneDrive/Software Engineering/Brainstation/projects/guess-the-word/frontend/src/components/WordDefinitions/WordDefinitions.js"],"sourcesContent":["import { NavLink, useParams, useNavigate } from \"react-router-dom\"\r\nimport axios from 'axios'\r\nimport { useState, useEffect } from \"react\";\r\nimport \"./WordDefinitions.scss\"\r\nfunction WordDefinitions(){\r\n    const navigate= useNavigate()\r\n    const { word } = useParams();\r\n    const [definition, setDefinition]= useState()\r\n    useEffect(()=>{\r\n    axios.post(\"http://localhost:3000/words/definition\",{word: word}).then((response)=>{\r\n        setDefinition(response.data)\r\n    }).catch((error)=>{console.log(\"error getting word definition\")})\r\n},[word])\r\n    return(\r\n    <section className=\"word-definitions\">\r\n    <NavLink to=\"/\" onClick={() => navigate(-1)} className=\"play-again__element\">Go Back to Home</NavLink>\r\n    <h1>{`${word.toUpperCase()}`}</h1>\r\n    <h3>{`Part of Speech: ${definition?.partOfSpeech}`}</h3>\r\n    {definition?.definitions?.map((element, index)=>{\r\n        return(<div key={index} className=\"word-definitions__container\">\r\n        <p><span>Definition:</span> {`${element?.definition}`}</p>\r\n        <p><span>Synonym:</span> {`${element?.synonyms[0] || \"\"}`}</p>\r\n        <p><span>Antonym:</span> {`${element?.antonyms[0] || \"\"}`}</p>\r\n        <p><span>Example:</span> {`${element?.example || \"\"}`}</p>\r\n        </div>)\r\n    })}\r\n    \r\n    </section>)\r\n}\r\nexport default WordDefinitions;"],"mappings":"AAAA,OAASA,OAAO,CAAEC,SAAS,CAAEC,WAAW,KAAQ,kBAAkB,CAClE,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,MAAO,wBAAwB,QAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAC/B,QAAS,CAAAC,eAAeA,CAAA,CAAE,KAAAC,qBAAA,CACtB,KAAM,CAAAC,QAAQ,CAAEV,WAAW,CAAC,CAAC,CAC7B,KAAM,CAAEW,IAAK,CAAC,CAAGZ,SAAS,CAAC,CAAC,CAC5B,KAAM,CAACa,UAAU,CAAEC,aAAa,CAAC,CAAEX,QAAQ,CAAC,CAAC,CAC7CC,SAAS,CAAC,IAAI,CACdF,KAAK,CAACa,IAAI,CAAC,wCAAwC,CAAC,CAACH,IAAI,CAAEA,IAAI,CAAC,CAAC,CAACI,IAAI,CAAEC,QAAQ,EAAG,CAC/EH,aAAa,CAACG,QAAQ,CAACC,IAAI,CAAC,CAChC,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,EAAG,CAACC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,EAAC,CAAC,CACrE,CAAC,CAAC,CAACV,IAAI,CAAC,CAAC,CACL,mBACAJ,KAAA,YAASe,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eACrClB,IAAA,CAACP,OAAO,EAAC0B,EAAE,CAAC,GAAG,CAACC,OAAO,CAAEA,CAAA,GAAMf,QAAQ,CAAC,CAAC,CAAC,CAAE,CAACY,SAAS,CAAC,qBAAqB,CAAAC,QAAA,CAAC,iBAAe,CAAS,CAAC,cACtGlB,IAAA,OAAAkB,QAAA,IAAAG,MAAA,CAAQf,IAAI,CAACgB,WAAW,CAAC,CAAC,EAAO,CAAC,cAClCtB,IAAA,OAAAkB,QAAA,oBAAAG,MAAA,CAAwBd,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEgB,YAAY,EAAO,CAAC,CACvDhB,UAAU,SAAVA,UAAU,kBAAAH,qBAAA,CAAVG,UAAU,CAAEiB,WAAW,UAAApB,qBAAA,iBAAvBA,qBAAA,CAAyBqB,GAAG,CAAC,CAACC,OAAO,CAAEC,KAAK,GAAG,CAC5C,mBAAOzB,KAAA,QAAiBe,SAAS,CAAC,6BAA6B,CAAAC,QAAA,eAC/DhB,KAAA,MAAAgB,QAAA,eAAGlB,IAAA,SAAAkB,QAAA,CAAM,aAAW,CAAM,CAAC,IAAC,IAAAG,MAAA,CAAIK,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAEnB,UAAU,GAAM,CAAC,cAC1DL,KAAA,MAAAgB,QAAA,eAAGlB,IAAA,SAAAkB,QAAA,CAAM,UAAQ,CAAM,CAAC,IAAC,IAAAG,MAAA,CAAI,CAAAK,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAEE,QAAQ,CAAC,CAAC,CAAC,GAAI,EAAE,GAAM,CAAC,cAC9D1B,KAAA,MAAAgB,QAAA,eAAGlB,IAAA,SAAAkB,QAAA,CAAM,UAAQ,CAAM,CAAC,IAAC,IAAAG,MAAA,CAAI,CAAAK,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAEG,QAAQ,CAAC,CAAC,CAAC,GAAI,EAAE,GAAM,CAAC,cAC9D3B,KAAA,MAAAgB,QAAA,eAAGlB,IAAA,SAAAkB,QAAA,CAAM,UAAQ,CAAM,CAAC,IAAC,IAAAG,MAAA,CAAI,CAAAK,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAEI,OAAO,GAAI,EAAE,GAAM,CAAC,GAJzCH,KAKZ,CAAC,CACV,CAAC,CAAC,EAEO,CAAC,CACd,CACA,cAAe,CAAAxB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}